<?php

/**
 * BaseSavedSearch
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $user_id
 * @property sfGuardUser $sfGuardUser
 * @property Doctrine_Collection $Informations
 * 
 * @method string              getName()         Returns the current record's "name" value
 * @method integer             getUserId()       Returns the current record's "user_id" value
 * @method sfGuardUser         getSfGuardUser()  Returns the current record's "sfGuardUser" value
 * @method Doctrine_Collection getInformations() Returns the current record's "Informations" collection
 * @method SavedSearch         setName()         Sets the current record's "name" value
 * @method SavedSearch         setUserId()       Sets the current record's "user_id" value
 * @method SavedSearch         setSfGuardUser()  Sets the current record's "sfGuardUser" value
 * @method SavedSearch         setInformations() Sets the current record's "Informations" collection
 * 
 * @package    EasyGtd
 * @subpackage model
 * @author     leobarrientosc
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseSavedSearch extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('saved_search');
        $this->hasColumn('name', 'string', 60, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '60',
             ));
        $this->hasColumn('user_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '20',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('SavedSearchInfo as Informations', array(
             'local' => 'id',
             'foreign' => 'saved_search_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}