<?php

/**
 * BaseProject
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property text $description
 * @property text $purpose
 * @property text $vision
 * @property text $brainstorming
 * @property integer $project_state_id
 * @property integer $user_id
 * @property sfGuardUser $sfGuardUser
 * @property ProjectState $ProjectState
 * @property Doctrine_Collection $ProjectAttachments
 * @property Doctrine_Collection $ProjectActions
 * @property Doctrine_Collection $ProjectNoActionableActions
 * 
 * @method integer             getId()                         Returns the current record's "id" value
 * @method string              getName()                       Returns the current record's "name" value
 * @method text                getDescription()                Returns the current record's "description" value
 * @method text                getPurpose()                    Returns the current record's "purpose" value
 * @method text                getVision()                     Returns the current record's "vision" value
 * @method text                getBrainstorming()              Returns the current record's "brainstorming" value
 * @method integer             getProjectStateId()             Returns the current record's "project_state_id" value
 * @method integer             getUserId()                     Returns the current record's "user_id" value
 * @method sfGuardUser         getSfGuardUser()                Returns the current record's "sfGuardUser" value
 * @method ProjectState        getProjectState()               Returns the current record's "ProjectState" value
 * @method Doctrine_Collection getProjectAttachments()         Returns the current record's "ProjectAttachments" collection
 * @method Doctrine_Collection getProjectActions()             Returns the current record's "ProjectActions" collection
 * @method Doctrine_Collection getProjectNoActionableActions() Returns the current record's "ProjectNoActionableActions" collection
 * @method Project             setId()                         Sets the current record's "id" value
 * @method Project             setName()                       Sets the current record's "name" value
 * @method Project             setDescription()                Sets the current record's "description" value
 * @method Project             setPurpose()                    Sets the current record's "purpose" value
 * @method Project             setVision()                     Sets the current record's "vision" value
 * @method Project             setBrainstorming()              Sets the current record's "brainstorming" value
 * @method Project             setProjectStateId()             Sets the current record's "project_state_id" value
 * @method Project             setUserId()                     Sets the current record's "user_id" value
 * @method Project             setSfGuardUser()                Sets the current record's "sfGuardUser" value
 * @method Project             setProjectState()               Sets the current record's "ProjectState" value
 * @method Project             setProjectAttachments()         Sets the current record's "ProjectAttachments" collection
 * @method Project             setProjectActions()             Sets the current record's "ProjectActions" collection
 * @method Project             setProjectNoActionableActions() Sets the current record's "ProjectNoActionableActions" collection
 * 
 * @package    EasyGtd
 * @subpackage model
 * @author     leobarrientosc
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseProject extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('project');
        $this->hasColumn('id', 'integer', 20, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '20',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('description', 'text', null, array(
             'type' => 'text',
             'notnull' => false,
             ));
        $this->hasColumn('purpose', 'text', null, array(
             'type' => 'text',
             'notnull' => false,
             ));
        $this->hasColumn('vision', 'text', null, array(
             'type' => 'text',
             'notnull' => false,
             ));
        $this->hasColumn('brainstorming', 'text', null, array(
             'type' => 'text',
             'notnull' => false,
             ));
        $this->hasColumn('project_state_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '20',
             ));
        $this->hasColumn('user_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '20',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('ProjectState', array(
             'local' => 'project_state_id',
             'foreign' => 'id'));

        $this->hasMany('ProjectAttachment as ProjectAttachments', array(
             'local' => 'id',
             'foreign' => 'project_id'));

        $this->hasMany('NextActionProject as ProjectActions', array(
             'local' => 'id',
             'foreign' => 'project_id'));

        $this->hasMany('NoActionableItemProject as ProjectNoActionableActions', array(
             'local' => 'id',
             'foreign' => 'project_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'name',
             ),
             'name' => 'normalized_name',
             'type' => 'string',
             'length' => 255,
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}